#!/bin/bash

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

if [ "$SNAP_ARCH" == "amd64" ]; then
  ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" == "armhf" ]; then
  ARCH="arm-linux-gnueabihf"
elif [ "$SNAP_ARCH" == "arm64" ]; then
  ARCH="aarch64-linux-gnu"
else
  ARCH="$SNAP_ARCH-linux-gnu"
fi

append_dir LOCPATH "$SNAP/usr/lib/locale"

export GTK_MODULES=""

# XDG Config
prepend_dir XDG_CONFIG_DIRS $SNAP/etc/xdg

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS $SNAP/usr/share
prepend_dir XDG_DATA_DIRS $SNAP_USER_COMMON

export HOME=$SNAP_USER_COMMON

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_COMMON/.local/share
mkdir -p $XDG_DATA_HOME

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_COMMON/.cache
mkdir -p $XDG_CACHE_HOME

# Set config folder to local path
export XDG_CONFIG_HOME=$SNAP_USER_COMMON/.config
mkdir -p $XDG_CONFIG_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Font Config and themes
export FONTCONFIG_PATH=$SNAP/etc/fonts/conf.d
#export FONTCONFIG_FILE=$XDG_CONFIG_HOME/fontconfig/fonts.conf

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ -f $SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ] && [ ! -f "${GDK_PIXBUF_MODULE_FILE}" ]; then
  $SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
fi

export CFLAGS="--sysroot=$SNAP" # -I$SNAP/usr/include -I$SNAP/usr/include/$ARCH"
export CXXFLAGS="--sysroot=$SNAP"
export LDFLAGS="--sysroot=$SNAP" # -L$SNAP/usr/lib -L$SNAP/usr/lib/$ARCH -L$SNAP/lib -L$SNAP/lib/$ARCH"
export SWIG_LIB="$SNAP/usr/share/swig3.0"

export MYCROFT_CACHE="$SNAP_USER_COMMON/.cache/mycroft_web_cache.json"
export PYTHONPATH="$SNAP/opt/mycroft:$SNAP/lib:$SNAP/usr/lib"
export GIT_EXEC_PATH="$SNAP/usr/lib/git-core"

if [ ! -d "$SNAP_USER_COMMON/mycroft" ]; then
    mkdir -p "$SNAP_USER_COMMON/mycroft"
    git clone --progress https://github.com/MycroftAI/mycroft-core.git "$SNAP_USER_COMMON/mycroft" 2>&1 | \
    yad --progress --pulsate --title="Mycroft" --text="Downloading Mycroft" --width=400 --center --no-buttons --auto-close --on-top --no-escape

    cd "$SNAP_USER_COMMON/mycroft"
    patch -Np1 < "$SNAP/mycroft-cache.diff"
else
    cd "$SNAP_USER_COMMON/mycroft"
fi

if [ ! -f "$SNAP_USER_COMMON/mycroft/.installed" ]; then
    python3 -m venv "$SNAP_USER_COMMON/mycroft/.venv" --without-pip
    rm -f "$SNAP_USER_COMMON/mycroft/.venv/python3"
    ln -s "$SNAP/usr/bin/python3" "$SNAP_USER_COMMON/mycroft/.venv/python3"

    curl -o $TMPDIR/get-pip.py https://bootstrap.pypa.io/get-pip.py 2>&1 | \
    stdbuf -oL tr '\r' '\n' | \
    sed -u -E 's/^ *([0-9][0-9]*).*( [0-9].*$)/\1\n#Downloading Python PIP(\2)/' | \
    yad --progress --title="Mycroft" --width=400 --center --no-buttons --auto-close --on-top --no-escape
    
    "$SNAP_USER_COMMON/mycroft/.venv/bin/python" $TMPDIR/get-pip.py | \
    yad --progress --pulsate --title="Mycroft" --text="Installing Python PIP" --width=400 --center --no-buttons --auto-close --on-top --no-escape

    . "$SNAP_USER_COMMON/mycroft/.venv/bin/activate"

    # easy_install pip==9.0.1

    PYTHON=$( python -c "import sys;print('python{}.{}'.format(sys.version_info[0], sys.version_info[1]))" )

    # Add mycroft-core to the virtualenv path
    # (This is equivalent to typing 'add2virtualenv $TOP', except
    # you can't invoke that shell function from inside a script)
    VENV_PATH_FILE="$SNAP_USER_COMMON/mycroft/.venv/lib/$PYTHON/site-packages/_virtualenv_path_extensions.pth"
    if [ ! -f "$VENV_PATH_FILE" ] ; then
        echo "import sys; sys.__plen = len(sys.path)" > "$VENV_PATH_FILE" || return 1
        echo "import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)" >> "$VENV_PATH_FILE" || return 1
    fi

    if ! grep -q "$SNAP_USER_COMMON/mycroft" $VENV_PATH_FILE; then
        echo "Adding mycroft-core to virtualenv path"
        sed -i.tmp '1 a\
'"$SNAP_USER_COMMON/mycroft"'
' "${VENV_PATH_FILE}"
    fi

    pip install -r requirements.txt | \
    yad --progress --pulsate --title="Mycroft" --text="Installing Mycroft dependencies" --width=400 --center --no-buttons --auto-close --on-top --no-escape
    md5sum requirements.txt test-requirements.txt dev_setup.sh > .installed
else
    . "$SNAP_USER_COMMON/mycroft/.venv/bin/activate"
fi

if [ ! -f "$SNAP_USER_COMMON/.mycroft/mycroft.conf" ]; then
    cat > "$SNAP_USER_COMMON/.mycroft/mycroft.conf" <<EOF
{
    "data_dir": "$SNAP_USER_COMMON/skills"
}
EOF
fi

if [ "$1" = "start-all" -o "$2" = "start-all" ]; then
    python3 $SNAP_USER_COMMON/mycroft/mycroft/messagebus/service/main.py &
    python3 $SNAP_USER_COMMON/mycroft/mycroft/skills/main.py &
    python3 $SNAP_USER_COMMON/mycroft/mycroft/audio/main.py &
    python3 $SNAP_USER_COMMON/mycroft/mycroft/client/speech/main.py &

    notify-send --icon "${SNAP}/meta/gui/mycroft.png" --expire-time=15000 "Mycroft" "Mycroft is now running, but it may be a minute more until Mycroft is ready to talk."

    wait
else
    exec "$@"
fi
