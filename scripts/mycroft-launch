#!/bin/bash

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

if [ "$SNAP_ARCH" == "amd64" ]; then
  ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" == "armhf" ]; then
  ARCH="arm-linux-gnueabihf"
elif [ "$SNAP_ARCH" == "arm64" ]; then
  ARCH="aarch64-linux-gnu"
else
  ARCH="$SNAP_ARCH-linux-gnu"
fi

append_dir LOCPATH "$SNAP/usr/lib/locale"

export GTK_MODULES=""

# XDG Config
prepend_dir XDG_CONFIG_DIRS $SNAP/etc/xdg

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS $SNAP/usr/share
prepend_dir XDG_DATA_DIRS $SNAP_USER_COMMON

export HOME=$SNAP_USER_COMMON

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_COMMON/.local/share
mkdir -p $XDG_DATA_HOME

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_COMMON/.cache
mkdir -p $XDG_CACHE_HOME

# Set config folder to local path
export XDG_CONFIG_HOME=$SNAP_USER_COMMON/.config
mkdir -p $XDG_CONFIG_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Font Config and themes
export FONTCONFIG_PATH=$SNAP/etc/fonts/conf.d
#export FONTCONFIG_FILE=$XDG_CONFIG_HOME/fontconfig/fonts.conf

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ -f $SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ] && [ ! -f "${GDK_PIXBUF_MODULE_FILE}" ]; then
  $SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
fi

export LDFLAGS="-L$SNAP/usr/lib -L$SNAP/usr/lib/$ARCH -L$SNAP/lib -L$SNAP/lib/$ARCH"
export SWIG_LIB="$SNAP/usr/share/swig3.0"

export MYCROFT_CACHE="$SNAP_USER_COMMON/.cache/mycroft_web_cache.json"
export MYCROFT_SKILLS="$SNAP_USER_COMMON/skills/skills"
export MYCROFT_SKILLS_REPO="$SNAP_USER_COMMON/skills/.skills-repo"
export PYTHONPATH="$SNAP/opt/mycroft:$SNAP/lib:$SNAP/usr/lib"
export GIT_EXEC_PATH="$SNAP/usr/lib/git-core"

export MPG123_MODDIR="$SNAP/usr/lib/$ARCH/mpg123"
export VLC_PLUGIN_PATH="$SNAP/usr/lib"

if [ ! -d "$SNAP_USER_COMMON/mycroft-core" ]; then
    if [ -d "$SNAP_USER_COMMON/mycroft" ]; then
        mv "$SNAP_USER_COMMON/mycroft" "$SNAP_USER_COMMON/mycroft-core"
    else
        mkdir -p "$SNAP_USER_COMMON/mycroft-core"
    fi
fi

if [ ! -f "$SNAP_USER_COMMON/mycroft-core/.version" ] || [ "$(cat "$SNAP_USER_COMMON/mycroft-core/.version")" != "$(cat "$SNAP/mycroft-source/.version")" ]; then
    cd "$SNAP_USER_COMMON/mycroft-core"

    [ -f "$SNAP_USER_COMMON/mycroft-core/.version" ] && ACTION="Updating" || ACTION="Installing"

    rsync -rv --exclude .venv --delete "$SNAP/mycroft-source/" "$SNAP_USER_COMMON/mycroft-core/" | \
    yad --progress --pulsate --title="Mycroft" --text="$ACTION mycroft" --width=400 --center --no-buttons --auto-close --on-top --no-escape

    python3 -m venv "$SNAP_USER_COMMON/mycroft-core/.venv" --without-pip
    rm -f "$SNAP_USER_COMMON/mycroft-core/.venv/bin/python3"
    ln -s "$(dirname "$SNAP")/current/usr/bin/python3" "$SNAP_USER_COMMON/mycroft-core/.venv/bin/python3"

    curl -o $TMPDIR/get-pip.py https://bootstrap.pypa.io/get-pip.py 2>&1 | \
    stdbuf -oL tr '\r' '\n' | \
    sed -u -E 's/^ *([0-9][0-9]*).*( [0-9].*$)/\1\n#Downloading Python PIP(\2)/' | \
    yad --progress --title="Mycroft" --width=400 --center --no-buttons --auto-close --on-top --no-escape
    
    "$SNAP_USER_COMMON/mycroft-core/.venv/bin/python3" $TMPDIR/get-pip.py | \
    yad --progress --pulsate --title="Mycroft" --text="Installing Python PIP" --width=400 --center --no-buttons --auto-close --on-top --no-escape

    sed -i 's|^def rmtree(dir, ignore_errors=False):|def rmtree(dir, ignore_errors=True):|' "$SNAP_USER_COMMON/mycroft-core/.venv/lib/python3.6/site-packages/pip/_internal/utils/misc.py"

    . "$SNAP_USER_COMMON/mycroft-core/.venv/bin/activate"

    PYTHON=$( python3 -c "import sys;print('python{}.{}'.format(sys.version_info[0], sys.version_info[1]))" )

    # Add mycroft-core to the virtualenv path
    # (This is equivalent to typing 'add2virtualenv $TOP', except
    # you can't invoke that shell function from inside a script)
    VENV_PATH_FILE="$SNAP_USER_COMMON/mycroft-core/.venv/lib/$PYTHON/site-packages/_virtualenv_path_extensions.pth"
    if [ ! -f "$VENV_PATH_FILE" ] ; then
        echo "import sys; sys.__plen = len(sys.path)" > "$VENV_PATH_FILE" || return 1
        echo "import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)" >> "$VENV_PATH_FILE" || return 1
    fi

    if ! grep -q "$SNAP_USER_COMMON/mycroft-core" $VENV_PATH_FILE; then
        if grep -q "$SNAP_USER_COMMON/mycroft" $VENV_PATH_FILE; then
            echo "Swapping mycroft path to mycroft-core in virtualenv"
            sed -i.tmp "s|$SNAP_USER_COMMON/mycroft|$SNAP_USER_COMMON/mycroft-core|" "$VENV_PATH_FILE"
        else
            echo "Adding mycroft-core to virtualenv path"
            sed -i.tmp '1 a\
'"$SNAP_USER_COMMON/mycroft-core"'
' "${VENV_PATH_FILE}"
        fi
    fi

    pip install -r requirements.txt | \
    stdbuf -oL tr '\r' '\n' | \
    yad --progress --pulsate --title="Mycroft" --text="Installing Mycroft dependencies" --width=400 --center --no-buttons --auto-close --on-top --no-escape
    
    cd "$SNAP_USER_COMMON/mycroft-core/.venv"
    if patch -Np1 --dry-run -i "$SNAP/msm-skillsdir.diff" 2>&1 > /dev/null; then
        patch -Np1 -i "$SNAP/msm-skillsdir.diff"
    fi
    cd "$SNAP_USER_COMMON/mycroft-core"
    md5sum requirements.txt test-requirements.txt dev_setup.sh > .installed
else
    . "$SNAP_USER_COMMON/mycroft-core/.venv/bin/activate"
fi

cd "$SNAP_USER_COMMON/mycroft-core"

if [ ! -d "$SNAP_USER_COMMON/.mycroft" ]; then
    if [ -d "$SNAP_USER_COMMON/.config/mycroft" ]; then
        mv "$SNAP_USER_COMMON/.config/mycroft" "$SNAP_USER_COMMON/.mycroft"
    else
        mkdir -p "$SNAP_USER_COMMON/.mycroft"
    fi
fi

if [ ! -f "$SNAP_USER_COMMON/.mycroft/mycroft.conf" ]; then
    cat > "$SNAP_USER_COMMON/.mycroft/mycroft.conf" <<EOF
{
    "data_dir": "$SNAP_USER_COMMON/mycroft-data",
    "cache_path": "$SNAP_USER_COMMON/.cache/mycroft"
}
EOF
fi

if ! grep "data_dir" "$SNAP_USER_COMMON/.mycroft/mycroft.conf" 2>&1 > /dev/null; then
    sed -i.tmp '1 a\
'"    \"data_dir\": \"$SNAP_USER_COMMON/mycroft-data\","'
' "$SNAP_USER_COMMON/.mycroft/mycroft.conf"
elif grep "\"data_dir\": \"$SNAP_USER_COMMON/skills\"" "$SNAP_USER_COMMON/.mycroft/mycroft.conf"; then
    sed -i.tmp "s|\"data_dir\": \"$SNAP_USER_COMMON/skills\"|\"data_dir\": \"$SNAP_USER_COMMON/mycroft-data\"|" "$SNAP_USER_COMMON/.mycroft/mycroft.conf"
fi

if ! grep "cache_path" "$SNAP_USER_COMMON/.mycroft/mycroft.conf" 2>&1 > /dev/null; then
    sed -i.tmp '1 a\
'"    \"cache_path\": \"$SNAP_USER_COMMON/.cache/mycroft\","'
' "$SNAP_USER_COMMON/.mycroft/mycroft.conf"
    sed -i.tmp '/"cache_dir"/d' "$SNAP_USER_COMMON/.mycroft/mycroft.conf"
fi

if [ ! -d "$SNAP_USER_COMMON/.cache/mycroft" ]; then
    mkdir -p "$SNAP_USER_COMMON/.cache/mycroft"
fi

if [ ! -d "$SNAP_USER_COMMON/mycroft-data" ]; then
    if [ -d "$SNAP_USER_COMMON/skills" ]; then
        mv "$SNAP_USER_COMMON/skills" "$SNAP_USER_COMMON/mycroft-data"
    else
        mkdir -p "$SNAP_USER_COMMON/mycroft-data/skills"
    fi
fi

export LD_LIBRARY_PATH="$SNAP/usr/lib/$ARCH/pulseaudio:$LD_LIBRARY_PATH"
# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

case "$1" in
    "start-all")
        python3 -m mycroft.messagebus.service &
        snapcraft-preload python3 -m mycroft.skills &
        python3 -m mycroft.audio &
        python3 -m mycroft.client.speech &

        # notify-send --icon "${SNAP}/meta/gui/mycroft.png" --expire-time=15000 "Mycroft" "Mycroft is now running, but it may be a minute more until Mycroft is ready to talk."

        wait
        ;;
    "skills")
        exec snapcraft-preload python3 -m mycroft.skills
        ;;
    *)
        exec python3 -m "mycroft.$1"
        ;;
esac
